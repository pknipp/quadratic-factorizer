[{"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js":"1","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js":"2","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js":"3","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js":"4","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js":"5"},{"size":506,"mtime":1611765216984,"results":"6","hashOfConfig":"7"},{"size":21526,"mtime":1612957183306,"results":"8","hashOfConfig":"7"},{"size":263,"mtime":1611883927809,"results":"9","hashOfConfig":"7"},{"size":2272,"mtime":1612920333996,"results":"10","hashOfConfig":"7"},{"size":178,"mtime":1612736632410,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18qfmsn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js",[],["24","25"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js",["26","27","28","29"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js",[],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js",["30"],"import React, { useState, useEffect } from 'react';\nimport Mark from './Mark';\n\nconst Factor = ({ i, rowsVisible, setRowsVisible, stage, setStage, a, b, c }) => {\n\n    const options = ['choose', '<', '=', '>'];\n    const [pair, setPair] = useState('');\n    const [pairGrade, setPairGrade] = useState(null);\n    const [sum, setSum] = useState('');\n    const [sumGrade, setSumGrade] = useState('');\n    const [index, setIndex] = useState(0);\n    const [indexGrade, setIndexGrade] = useState(null);\n\n    useEffect(() => {\n        debugger\n        let myPair = pair;\n        if (myPair[0] === \"(\") myPair = myPair.slice(1);\n        if (myPair[myPair.length - 1] === \")\") myPair = myPair.slice(0,-1);\n        myPair = myPair.replace(/ /g,'').split(',').map(char => Number(char));\n        const myPairGrade = pair === '' ? null :\n        // myPair.length === 2 &&\n            myPair[0] * myPair[1] === a * c;\n        setPairGrade(myPairGrade);\n\n        const mySumGrade = sum === '' ? null : (myPairGrade && myPair[0] + myPair[1] === sum);\n        setSumGrade(mySumGrade);\n\n        let diff = sum - b;\n        const myIndexGrade = mySumGrade && index === 2 + Math.sign(diff)\n        setIndexGrade(!index ? null : myIndexGrade);\n        debugger\n\n        if (myIndexGrade) {\n            if (!diff) {\n                setStage(3 + (a === 1 ? 3 : 0));\n            } else {\n                setRowsVisible(rowsVisible + 1);\n            }\n        }\n    }, [pair, sum, index]);\n\n    return (\n        <tr>\n            <td>\n                <input type=\"text\" value={pair} onChange={e => setPair(e.target.value)} />\n                <Mark grade={pairGrade} />\n            </td>\n            <td>\n                <input type=\"number\" value={sum} onChange={e => setSum(Number(e.target.value))}  />\n                <Mark grade={sumGrade} />\n            </td>\n            <td>\n                sum\n                <select value={index} onChange={e => setIndex(Number(e.target.value))}>\n                    {options.map((option, index) => (\n                        <option key={index} value={index}> {option} </option>\n                    ))}\n                </select>\n                 b\n                <Mark grade={indexGrade} />\n            </td>\n        </tr>\n     )\n}\n\nexport default Factor;\n","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":202,"column":20,"nodeType":"37","endLine":202,"endColumn":35,"suggestions":"38"},{"ruleId":"35","severity":1,"message":"39","line":216,"column":20,"nodeType":"37","endLine":216,"endColumn":39,"suggestions":"40"},{"ruleId":"35","severity":1,"message":"41","line":226,"column":20,"nodeType":"37","endLine":226,"endColumn":44,"suggestions":"42"},{"ruleId":"35","severity":1,"message":"43","line":234,"column":20,"nodeType":"37","endLine":234,"endColumn":38,"suggestions":"44"},{"ruleId":"35","severity":1,"message":"45","line":40,"column":8,"nodeType":"37","endLine":40,"endColumn":26,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'coefs' and 'coefsGrade'. Either include them or remove the dependency array.","ArrayExpression",["49"],"React Hook useEffect has missing dependencies: 'subString' and 'subStringGrade'. Either include them or remove the dependency array.",["50"],"React Hook useEffect has a missing dependency: 'factoredString'. Either include it or remove the dependency array.",["51"],"React Hook useEffect has a missing dependency: 'solution'. Either include it or remove the dependency array.",["52"],"React Hook useEffect has missing dependencies: 'a', 'b', 'c', 'rowsVisible', 'setRowsVisible', and 'setStage'. Either include them or remove the dependency array. If 'setStage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["53"],"no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},{"desc":"56","fix":"57"},{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},{"desc":"62","fix":"63"},"Update the dependencies array to be: [coefs, coefsGrade, coefsResponse]",{"range":"64","text":"65"},"Update the dependencies array to be: [subString, subStringGrade, subStringResponse]",{"range":"66","text":"67"},"Update the dependencies array to be: [factoredString, factoredStringResponse]",{"range":"68","text":"69"},"Update the dependencies array to be: [solution, solutionResponse]",{"range":"70","text":"71"},"Update the dependencies array to be: [pair, sum, index, a, c, b, setStage, setRowsVisible, rowsVisible]",{"range":"72","text":"73"},[8719,8734],"[coefs, coefsGrade, coefsResponse]",[9279,9298],"[subString, subStringGrade, subStringResponse]",[9732,9756],"[factoredString, factoredStringResponse]",[10068,10086],"[solution, solutionResponse]",[1443,1461],"[pair, sum, index, a, c, b, setStage, setRowsVisible, rowsVisible]"]
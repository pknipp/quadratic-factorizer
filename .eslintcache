[{"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js":"1","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js":"2","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js":"3","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js":"4","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js":"5"},{"size":506,"mtime":1611765216984,"results":"6","hashOfConfig":"7"},{"size":23259,"mtime":1613167191227,"results":"8","hashOfConfig":"7"},{"size":263,"mtime":1611883927809,"results":"9","hashOfConfig":"7"},{"size":2785,"mtime":1613167191228,"results":"10","hashOfConfig":"7"},{"size":178,"mtime":1612736632410,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18qfmsn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js",[],["24","25"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js",["26","27","28"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js",[],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js",["29","30","31"],"import React, { useState, useEffect } from 'react';\nimport Mark from './Mark';\n\nconst Factor = ({ i, rowsVisible, setRowsVisible, step, setStep, a, b, c }) => {\n\n    const options = ['choose', '<', '=', '>'];\n    const [pair, setPair] = useState('');\n    const [pairGrade, setPairGrade] = useState(null);\n    const [sum, setSum] = useState('');\n    const [sumGrade, setSumGrade] = useState('');\n    const [index, setIndex] = useState(0);\n    const [indexGrade, setIndexGrade] = useState(null);\n\n    useEffect(() => {\n        let myPair = pair;\n        if (myPair[0] === \"(\") myPair = myPair.slice(1);\n        if (myPair[myPair.length - 1] === \")\") myPair = myPair.slice(0,-1);\n        myPair = myPair.replace(/ /g,'').split(',').map(char => Number(char));\n        const myPairGrade = pair === '' ? null :\n        // myPair.length === 2 &&\n            myPair[0] * myPair[1] === a * c;\n        setPairGrade(myPairGrade);\n\n        const mySumGrade = sum === '' ? null : (myPairGrade && myPair[0] + myPair[1] === sum);\n        setSumGrade(mySumGrade);\n\n        let diff = sum - b;\n        const myIndexGrade = mySumGrade && index === 2 + Math.sign(diff)\n        setIndexGrade(!index ? null : myIndexGrade);\n\n        if (myIndexGrade) {\n            if (!diff) {\n                setStep(3 + (a === 1 ? 3 : 0));\n            } else {\n                setRowsVisible(rowsVisible + 1);\n            }\n        }\n    }, [pair, sum, index, a, b, c, setStep, setRowsVisible]);\n\n    return (\n        <tr>\n            <td>\n                <input type=\"text\" className={\"medium\"} value={pair} onChange={e => setPair(e.target.value)} />\n                <Mark grade={pairGrade} />\n            </td>\n            <td>\n                <input type=\"number\" className={\"short\"} value={sum} onChange={e => setSum(Number(e.target.value))}  />\n                <Mark grade={sumGrade} />\n            </td>\n            <td>\n                sum\n                <select value={index} onChange={e => setIndex(Number(e.target.value))}>\n                    {options.map((option, index) => (\n                        <option key={index} value={index}> {option} </option>\n                    ))}\n                </select>\n                 <i>b</i>\n                <Mark grade={indexGrade} />\n            </td>\n        </tr>\n     )\n}\n\nexport default Factor;\n","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":27,"column":12,"nodeType":"38","messageId":"39","endLine":27,"endColumn":22},{"ruleId":"40","severity":1,"message":"41","line":198,"column":20,"nodeType":"42","endLine":198,"endColumn":42,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":211,"column":20,"nodeType":"42","endLine":211,"endColumn":50,"suggestions":"45"},{"ruleId":"40","severity":1,"message":"46","line":22,"column":20,"nodeType":"42","endLine":22,"endColumn":40,"suggestions":"47"},{"ruleId":"40","severity":1,"message":"48","line":29,"column":20,"nodeType":"42","endLine":29,"endColumn":42,"suggestions":"49"},{"ruleId":"40","severity":1,"message":"50","line":44,"column":20,"nodeType":"42","endLine":44,"endColumn":35,"suggestions":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'pairsGrade' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'coefsGrade'. Either include it or remove the dependency array.","ArrayExpression",["54"],"React Hook useEffect has a missing dependency: 'subStringGrade'. Either include it or remove the dependency array.",["55"],"React Hook useEffect has a missing dependency: 'setColsVisible'. Either include it or remove the dependency array. If 'setColsVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["56"],"React Hook useEffect has missing dependencies: 'pairArray', 'pairGrade', and 'setColsVisible'. Either include them or remove the dependency array. If 'setColsVisible' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["57"],"React Hook useEffect has missing dependencies: 'a', 'b', 'rowsVisible', 'setColsVisible', 'setRowsVisible', 'setStep', 'sumGrade', and 'sumResponse'. Either include them or remove the dependency array. If 'setStep' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [coefsResponse, coefs, coefsGrade]",{"range":"69","text":"70"},"Update the dependencies array to be: [subStringResponse, subString, subStringGrade]",{"range":"71","text":"72"},"Update the dependencies array to be: [pairResponse, prod, setColsVisible]",{"range":"73","text":"74"},"Update the dependencies array to be: [sumResponse, prod, b, pairGrade, pairArray, setColsVisible]",{"range":"75","text":"76"},"Update the dependencies array to be: [a, b, indexResponse, rowsVisible, setColsVisible, setRowsVisible, setStep, sumGrade, sumResponse]",{"range":"77","text":"78"},[8751,8773],"[coefsResponse, coefs, coefsGrade]",[9304,9334],"[subStringResponse, subString, subStringGrade]",[991,1011],"[pairResponse, prod, setColsVisible]",[1266,1288],"[sumResponse, prod, b, pairGrade, pairArray, setColsVisible]",[1759,1774],"[a, b, indexResponse, rowsVisible, setColsVisible, setRowsVisible, setStep, sumGrade, sumResponse]"]
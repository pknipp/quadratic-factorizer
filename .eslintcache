[{"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js":"1","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js":"2","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js":"3","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js":"4","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js":"5"},{"size":506,"mtime":1611765216984,"results":"6","hashOfConfig":"7"},{"size":22153,"mtime":1613010305313,"results":"8","hashOfConfig":"7"},{"size":263,"mtime":1611883927809,"results":"9","hashOfConfig":"7"},{"size":2351,"mtime":1613007101633,"results":"10","hashOfConfig":"7"},{"size":178,"mtime":1612736632410,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18qfmsn",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/index.js",[],["24","25"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/App.js",["26","27"],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Mark.js",[],"/Users/pknipp/Desktop/repos/quadratic-factorizer/src/Factor.js",["28"],"import React, { useState, useEffect } from 'react';\nimport Mark from './Mark';\n\nconst Factor = ({ i, rowsVisible, setRowsVisible, step, setStep, a, b, c }) => {\n\n    const options = ['choose', '<', '=', '>'];\n    const [pair, setPair] = useState('');\n    const [pairGrade, setPairGrade] = useState(null);\n    const [sum, setSum] = useState('');\n    const [sumGrade, setSumGrade] = useState('');\n    const [index, setIndex] = useState(0);\n    const [indexGrade, setIndexGrade] = useState(null);\n\n    useEffect(() => {\n        debugger\n        let myPair = pair;\n        if (myPair[0] === \"(\") myPair = myPair.slice(1);\n        if (myPair[myPair.length - 1] === \")\") myPair = myPair.slice(0,-1);\n        myPair = myPair.replace(/ /g,'').split(',').map(char => Number(char));\n        const myPairGrade = pair === '' ? null :\n        // myPair.length === 2 &&\n            myPair[0] * myPair[1] === a * c;\n        setPairGrade(myPairGrade);\n\n        const mySumGrade = sum === '' ? null : (myPairGrade && myPair[0] + myPair[1] === sum);\n        setSumGrade(mySumGrade);\n\n        let diff = sum - b;\n        const myIndexGrade = mySumGrade && index === 2 + Math.sign(diff)\n        setIndexGrade(!index ? null : myIndexGrade);\n        debugger\n\n        if (myIndexGrade) {\n            if (!diff) {\n                setStep(3 + (a === 1 ? 3 : 0));\n            } else {\n                setRowsVisible(rowsVisible + 1);\n            }\n        }\n    }, [pair, sum, index, a, b, c, setStep, setRowsVisible]);\n\n    return (\n        <tr>\n            <td>\n                <input type=\"text\" className={\"medium\"} value={pair} onChange={e => setPair(e.target.value)} />\n                <Mark grade={pairGrade} />\n            </td>\n            <td>\n                <input type=\"number\" className={\"short\"} value={sum} onChange={e => setSum(Number(e.target.value))}  />\n                <Mark grade={sumGrade} />\n            </td>\n            <td>\n                sum\n                <select value={index} onChange={e => setIndex(Number(e.target.value))}>\n                    {options.map((option, index) => (\n                        <option key={index} value={index}> {option} </option>\n                    ))}\n                </select>\n                 <i>b</i>\n                <Mark grade={indexGrade} />\n            </td>\n        </tr>\n     )\n}\n\nexport default Factor;\n","/Users/pknipp/Desktop/repos/quadratic-factorizer/src/gcd.js",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":197,"column":20,"nodeType":"35","endLine":197,"endColumn":42,"suggestions":"36"},{"ruleId":"33","severity":1,"message":"37","line":210,"column":20,"nodeType":"35","endLine":210,"endColumn":50,"suggestions":"38"},{"ruleId":"33","severity":1,"message":"39","line":40,"column":8,"nodeType":"35","endLine":40,"endColumn":60,"suggestions":"40"},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'coefsGrade'. Either include it or remove the dependency array.","ArrayExpression",["43"],"React Hook useEffect has a missing dependency: 'subStringGrade'. Either include it or remove the dependency array.",["44"],"React Hook useEffect has a missing dependency: 'rowsVisible'. Either include it or remove the dependency array.",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},{"desc":"48","fix":"49"},{"desc":"50","fix":"51"},"Update the dependencies array to be: [coefsResponse, coefs, coefsGrade]",{"range":"52","text":"53"},"Update the dependencies array to be: [subStringResponse, subString, subStringGrade]",{"range":"54","text":"55"},"Update the dependencies array to be: [pair, sum, index, a, b, c, setStep, setRowsVisible, rowsVisible]",{"range":"56","text":"57"},[8682,8704],"[coefsResponse, coefs, coefsGrade]",[9235,9265],"[subStringResponse, subString, subStringGrade]",[1440,1492],"[pair, sum, index, a, b, c, setStep, setRowsVisible, rowsVisible]"]